Infix to Postfix expression 

Input :
2
A+B-C
D+E/F-G

Output  :
Postfix expression 1: AB+C-
Postfix expression 2: DEF/+G-

---------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;
char st[100];
int top=-1;
void push(char ch)
{
    st[++top]=ch;
}
void pop()
{
    top--;
}
int getPrecedence(char op)
{
    if(op=='^')
    return 3;
    else if(op=='*'||op=='/')
    return 2;
    else if(op=='+'||op=='-')
    return 1;
    else
    return -1;
}
string infixtopostfix(string infix)
{
    string postfix;
    for(char c:infix)
    {
        if((c>='a' && c<='z')||(c>='A' && c<='Z')||(c>='0' && c<='9')){
        postfix+=c;}
        else if(c=='(')
        {
            push(c);
        }
        else if(c==')')
        {
            while(top!=-1 && st[top]!='(')
            {
                postfix+=st[top];
                pop();
            }
            pop();
        }
        else
        {
            while(top!=-1 && getPrecedence(c)<=getPrecedence(st[top]))
            {
                postfix+=st[top];
                pop();
            }
            push(c);
        }
    }
    while(top!=-1)
    {
        postfix+=st[top];
        pop();
    }
    return postfix;
}
string infixtoprefix(string expr)
{
    reverse(expr.begin(),expr.end());
    for(int i=0;i<expr.length();i++)
    {
        if(expr[i]=='(')
          expr[i]=')';
         else if(expr[i]==')')
           expr[i]='(';
    }
    string postfix=infixtopostfix(expr);
    reverse(postfix.begin(),postfix.end());
    return postfix;
}
int main()
{
    int num;
    cin>>num;
    string infix,postfix;
    for(int i=1;i<=num;i++)
    {
        cin>>infix;
        postfix=infixtopostfix(infix);
        cout<<"Postfix expression "<<i<<": "<<postfix<<endl;
    }
}
